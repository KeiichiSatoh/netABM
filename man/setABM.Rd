% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setABM.R
\name{setABM}
\alias{setABM}
\title{Setting ABM_D Objects}
\usage{
setABM(
  agents = NULL,
  net = NULL,
  mat = NULL,
  euc = NULL,
  df = NULL,
  other_field = NULL,
  active_binding_field = NULL,
  global_FUN = NULL,
  select_FUN = NULL,
  stop_FUN = NULL,
  update_FUN = NULL,
  partial_update_FUN_body = NULL,
  log = NULL,
  time = NULL,
  notes = NULL,
  init = list(agents = NULL, net = NULL, mat = NULL, euc = NULL, df = NULL, other_field =
    NULL, active_binding_field = NULL, global_FUN = NULL, select_FUN = NULL, stop_FUN =
    NULL, update_FUN = NULL, partial_update_FUN_body = NULL, log = NULL, time = NULL,
    notes = NULL)
)
}
\arguments{
\item{net}{an integer/matrix/array or list of them for constructing the network field.}

\item{euc}{an integer/matrix/data.frame or list of them for constructing
objects that representing agents' position in a euclidean space.}

\item{other_field}{A vector/matrix/array or list of them for constructing
the fields other than \code{net}, \code{ca}, and \code{euc}.}

\item{log}{a list that stores the log of the simulation. For the normal usage, leave this input \code{NULL}.}

\item{time}{an integer of the current time of the data. For the normal usage, leave this input \code{NULL}.}

\item{notes}{a vector or list of them for storing the any meta data.}

\item{agent_n}{integer for setting the number of agents.}

\item{agent_attr}{vector/data.frame/list of attributes of agents
(default: \code{NULL}).}

\item{agent_f}{a user-defined or built-in function object or
list of them representing agent's actions.}

\item{ca}{an integer/matrix/array or list of them for constructing
ca (i.e., Cellular Automaton) field.}
}
\value{
an \code{ABM_D} class object
}
\description{
\code{setABM} constructs a \code{ABM_D} object, which is the main data object of the /code{netABM} package.
}
\details{
\code{setABM} is a constructor of \code{setABM_D} object,
which has \code{agent}, \code{time}(set as 1), \code{log} (set as NULL),
and \code{notes} as default.

Each agent in the \code{agent} has their attribute set by \code{agent_attr}
and the action as \code{.f} (i.e., "function").
In addition to the user-defined \code{agent_attr}, each agent automatically get its \code{ID} and \code{f_label} and store them
as their attributes. The latter \code{f_label} is taken from the object name of \code{agent_f}.

There are two ways to set \code{agnet_f}.
The first way is to write the user's own function of agent's
action and supply this object to \code{agent_f}.
Do not write the function directly to \code{agent_f} because this will not be properly parsed.
Upon writing an original function, be sure to aware the following two reserved name:
\itemize{
\item \code{self} is a reserved for indicating the agent themselves.
\item \code{D} is a reserved for indicating the {ABM_D} object.
}

The second way of setting \code{agent_f} is to use a built-in function of this package.
This second way actually has further three variations. First, the easiest one,
just supply the function object to \code{agent_f} (e.g., agent_f = function_name).
Second, if user wants to modify some argument, supply it as a form: \code{function_name(x = a new value)}.
Third, if user wants to put another name to this modified function object, assign it with substitute().
Then supply this substituted object to \code{agnet_f}. The last method may be useful when the modification
of the function is very long.
For getting the ideas more concretely about how to supply a function to \code{agent_f},
see the examples below.

If \code{net} is an integer, it creates the relevant number of \code{net} field
in the resulted \code{ABM_D} object, wherein there are no ties among agents.
Notably, if the integer is supplied as list, each value is used for filling each cell in each matrix.

Likewise, if \code{ca} is an integer, it creates the relevant number of \code{ca} field,
wherein the position of each agent is randomly assigned in a \code{sqrt(agent_n + 1)*sqrt(agent_n + 1)} matrix.
Uf the integer is supplied as list, each value is used for determining the \code{nrow} and \code{ncol} of each matrix.

Similarly, if \code{euc} is an integer, it creates the relevant number of \code{euc} field,
wherein the position of each agent is randomly assigned in a two-dimensional space
via normal distribution that has the mean value of 0 and the standard deviation of 1.

\code{notes} can be used, for example, to store the parameter of constructing
fields. The values in the notes can be later converted into a variable of agent * variable data.frame
via the data-format transformer \code{agrABM}.
}
\examples{
Data for the agent attributes and agent behavior
agent_attr <- data.frame(
age = c(0, 1, 2, 3, 4),
sex = c("m","m","m","f","f"))

# Behavior 1: Agent gets older by beta in each time in a simulation.
agent_get_older <- function(beta = 1){self$age <- self$age + beta}

# Example 1-1: Set the default behavior
D1_1 <- setABM(agent_n = 3, agent_f = agent_get_older)

# Example 1-2: Modifying the behavior parameter beta to 2
D1_2 <- setABM(agent_n = 3, agent_f = agent_get_older(b = 2))

# Example 2: Set a net field and set a agent behavior on this field
# Behavior 2: Agent add an edge randomly
add_an_edge <- function(){
  alters_candid <- as.character(setdiff(1:length(D$agent), self$ID))
  alter_decided <- sample(alters_candid, size = 1)
  D$net[self$ID, alter_decided] <- 1}

D2 <- setABM(agent_n = 3, net = 1, agent_f = add_an_edge)
}
\author{
Keiichi Satoh
}
