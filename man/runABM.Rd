% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runABM.R
\name{runABM}
\alias{runABM}
\title{Run the simulation based on the ABM_D object}
\usage{
runABM(
  D,
  schedule = NULL,
  remove_field = NULL,
  rename_field = NULL,
  keep_field = NULL,
  update_FUN_name = NULL,
  stop_FUN_name = NULL,
  times = 1,
  save_log = FALSE,
  add_tryCatch = TRUE,
  return_update_FUN = FALSE,
  saveRDS_inbetween = FALSE,
  temp_E = NULL,
  RDS_file_name = "D_temp.rds"
)
}
\arguments{
\item{D}{a \code{ABM_D} class object.}

\item{save_log}{logical; if the log of each run should be saved.
The default is \code{FALSE}.}

\item{selectFUN}{either a character of \code{"all"} or \code{"one"} or
a user-defined function object about which agents to select for each time.}

\item{stopFUN}{An integer or a user-defined function that
determines when the simulation to stop. The default value \code{1} will
result in running one simulation.}

\item{updateFUN}{A user-defined function that
determines how the update of the field will be done.
The default value \code{NULL} will result in letting the selected agents
defined in \code{selectFUN} act based on their \code{.f} of each agent.}
}
\value{
a \code{ABM_D} class object
}
\description{
\code{runABM} let agents their action defined by \code{.f} of each agent
in the \code{ABM_D} object.
}
\details{
\code{runABM} is a simulator based on \code{ABM_D} object.
In each run the selected agents act their action defined in \code{.f} of each agent.

Because the counting system of \code{R} starts from 1, \code{runABM} counts
the initial time starts from 1, which means that the one run of the
simulation corresponds to time 2.

The built-in \code{.selectFUN} are as follows:
\itemize{
\item \code{"all"}: selecting all agents.
\item \code{"one"}: Randomly selecting one agent in each time.
}

If user supplies its own stop function, the function should return the
integer of each agent ID.

If user supplied an original function to \code{stopFUN}, it should return
\code{TRUE} when the condition to stop is satisfied.

If user supplied an own function to \code{updateFUN}, it should define
how to update the object \code{D}.
Notably, the default behavior of this function is that
it internally creates a new function into which the supplied selectFUN
and updateFUN is integrated in this order. Accordingly, if the user-defined
updateFUN includes a procedure to select agents, be sure to set \code{selectFUN}
as \code{NULL},
}
\examples{
Data for the agent attributes and agent behavior
agent_attr <- data.frame(
age = c(0, 1, 2, 3, 4),
sex = c("m","m","m","f","f"))

# Behavior 1: Agent gets older by beta in each time in a simulation.
agent_get_older <- function(beta = 1){self$age <- self$age + beta}
Set the default behavior
D1 <- setABM(agent_n = 3, agent_f = agent_get_older)

# Example 1: Select all agents in each run
D1_1 <- runABM(D = D1, selectFUN = "all", save_log = TRUE)

# Example 2: Select one agent in each run
D1_2 <- runABM(D = D1, selectFUN = "one", save_log = TRUE)
}
\author{
Keiichi Satoh
}
