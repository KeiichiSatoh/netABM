% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setABM_ca.R
\name{setABM_ca}
\alias{setABM_ca}
\title{Setting netABM_ca (Cellular Automaton) Objects}
\usage{
setABM_ca(agent_n, agent_attr = NULL, agent_f = list(NULL), ca = NULL)
}
\arguments{
\item{agent_n}{integer. Number of agents}

\item{agent_attr}{vector/data.frame/list of attributes of agents (default: \code{NULL})}

\item{agent_f}{a user-defined or built-in function object or list of them representing agent's actions.}

\item{ca}{A matrix/array or list of matrices/arrays of cellular automaton. The default \code{NULL} will result in creating a
\code{agent_n}*\code{agent_n} square matrix.}
}
\value{
a \code{netABM_ca} class object D (see Details)
}
\description{
\code{setABM_ca} constructs a \code{netABM_ca} object for running ABM.
}
\details{
\code{setAgent_cax} is a constructor of \code{netABM_ca} object (D)
which has \code{agent}, \code{ca}, \code{time}(set as 1), and \code{log} (set as NA)
as a list format.
Each agent in the \code{agent} has their attribute listed under \code{a} (i.e. "attributes"),
and the action as \code{.f} (i.e., "function").
The each agent under \code{agent} and \code{ca} are \code{R6} class objects from package \code{R6}.

Each agent automatically get its \code{ID} and \code{f_label} and store them as their attributes.
The latter \code{f_label} is taken from the supplied object name of \code{agent_f}.

There are two ways to set \code{agnet_f}.
The first way is to write the user's own function of agent's
actions and attach it to an object and supply this object to \code{agent_f}.
Do not write the function directly to \code{agent_f} because this will not be properly parsed.
Upon writing an original function, be sure to set \code{D} as the first argument without any default;
otherwise agent's action does not reflect dynamically to the changing \code{D} object during the simulation.
\code{self} is a reserved for indicating the agent themselves.

The second way of setting \code{agent_f} is to use a built-in function of this package.
This second way actually has further three variations. First, the easiest one,
just supply the function object to \code{agent_f} (e.g., agent_f = function_name).
Second, if user wants to modify some argument, supply it as a form: \code{function_name(x = a new value)}.
Third, if user wants to put another name to this modified function object, assign it with substitute().
Then supply this substituted object to \code{agnet_f}. The last method may be useful when the modification
of the function is very long.
For getting the ideas more concretely about how to supply a function to \code{agent_f},
see the examples below.

Upon supplying the \code{ca}, each entry number in a CA matrix/array must represent
the agent IDs, if users want to let agent interact with the CA (e.g. letting agent move on the CA),
because each agent identify their location based on their ID. (Of course, if
the user does not intend to use the CA in that way, it is fine to set the number freely.)
}
\examples{
# Data for the agent attributes and agent behavior
agent_attr <- data.frame(
  age = c(0, 1, 2, 3, 4),
  sex = c("m","m","m","f","f"))

# A very simple behavior: agent simply tries to move to the location 1 in the CA
 move_to_1 <- function(D){
   ca_move(D = D, ID = self$ID, where_to = 1)}

# Example 1: A simple example
set.seed(seed = 3)
ca1 <- init_ca(agent_n = 5, dim = c(5,5))
D <- setABM_ca(agent_n = 5,
               agent_attr = agent_attr,
               agent_f = move_to_1,
               ca = ca1)

# print the state of art of D
print(D)

# Letting the agent A1 to move
D$ca$ca1               # Agent 1 locates at the bottom-left corner
D$agent$A1$.f(D)       # Agent 1's action to move to 1
D$ca$ca1               # Agent 1 locates at the bottom-left corner
}
\seealso{
Other setABM: 
\code{\link{setABM_network}()},
\code{\link{setABM_spatNetwork}()}
}
\author{
Keiichi Satoh
}
\concept{setABM}
