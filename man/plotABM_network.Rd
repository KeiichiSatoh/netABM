% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotABM_network.R
\name{plotABM_network}
\alias{plotABM_network}
\title{Visualize the Result of the netABM Simulation}
\usage{
plotABM_network(
  D,
  log = F,
  duplicated_edges = "sum",
  which_net = 1,
  show_d3movie = TRUE,
  movie_output_mode = "HTML",
  displaylabels = TRUE,
  label.cex = 0.6,
  label.col = "blue",
  vertex.cex = 1,
  vertex.col = "purple",
  edge.lwd = "weight",
  edge.col = "darkgray",
  usearrows = TRUE,
  filename = "D_net",
  animation.mode = "kamadakawai",
  d3.options = list(animationDuration = 1600),
  render.par = list(tween.frames = 10, show.time = T, show.stats = NULL, extraPlotCmds =
    NULL, initial.coords = 0)
)
}
\arguments{
\item{D}{A \code{netABM} object.}

\item{log}{Logical, indicating whether to plot the figures of each time slice. If \code{FALSE}, the only the current network will be plotted. Default is \code{FALSE}.}

\item{duplicated_edges}{Character string indicating how duplicated edges should be handled.
Options are \code{"sum"}, code{"max"}, \code{"min"}, or \code{"mean"}. Default is \code{"sum"}.}

\item{which_net}{Integer or character string specifying which network to plot if there are multiple networks in the \code{netABM} object. Default is \code{1}.}

\item{show_d3movie}{Logical, indicating whether to display the movie of the change of the network.
Default is \code{TRUE}. If set as \code{FALSE}, the normal plotting will be executed.}

\item{movie_output_mode}{Character string specifying the output mode for the movie.
Options are \code{"HTML"}, \code{"JSON"}, \code{"inline"}, or \code{"htmlWidget"}. Default is \code{"HTML"}.}

\item{displaylabels}{Logical, indicating whether to display labels for nodes. Default is \code{TRUE}.}

\item{label.cex}{Numeric value specifying the size of node labels. Default is \code{0.6}.}

\item{label.col}{Character string specifying the color of node labels. Default is \code{"blue"}.}

\item{vertex.cex}{Numeric value or function specifying the size of nodes. Default is \code{1}.}

\item{vertex.col}{Character string or function specifying the color of nodes. Default is \code{"purple"}.}

\item{edge.lwd}{Numeric value or function specifying the width of edges. Default is \code{"weight"},
so that edge weight of the network will be reflected as the width.}

\item{edge.col}{Character string or function specifying the color of edges. Default is \code{"darkgray"}.}

\item{usearrows}{Logical, indicating whether to use arrows for directed edges. Default is \code{TRUE}.}

\item{filename}{Character string specifying the filename for the output HTML file if \code{show_d3movie} is \code{TRUE}. Default is "D_net".}

\item{animation.mode}{Character string specifying the animation mode for dynamic networks. Default is \code{"kamadakawai"}.
Other options are: \code{"MDSJ"}, \code{"useAttriute"}, and \code{"Graphviz"}.}

\item{d3.options}{List of options for D3 rendering. The default duration of each time slice is 1600 milliseconds.
see \code{d3.options} in \code{\link[ndtv:render.d3movie]{ndtv::render.d3movie()}}}

\item{render.par}{List of parameters for rendering the movie. see \code{render.par} in \code{\link[ndtv:render.d3movie]{ndtv::render.d3movie()}}}
}
\description{
This function plots the result of simulation of netABM.
}
\details{
\code{plotABM_network} is the wrapper function of the \code{ndtv} package so that
users can directly supply \code{netABM} object and plot or show the movie of it.
This function internally calls the \code{D_to_statnet} function and pass the returned object to
\code{ndtv}'s functions with some format setting. Accordingly, if the user want to
make more fine-grained movie by themselves, just use \code{D_to_statnet} function and
write further scripts.

Basically, four different options are available for \code{plotABM_network} depending on
how the user sets \code{log} and \code{show_d3movie}:
\itemize{
\item \code{log = F} and \code{show_d3movie = F}: Showing the current plot as a static figure.
This combination uses the \code{network} package's \code{plot} function.
\item \code{log = T} and \code{show_d3movie = F}: Showing each time-step plot as separate figures
using \code{network} pacakge
\item code{log = F} and \code{show_d3movie = T}: Showing the current plot using the
\code{ndtv}'s \code{render.d3movie = T} function.
\item code{log = T} and \code{render.d3movie = T}: Showing the movie of whole steps using
\code{ndtv}'s \code{render.d3movie = T} function.
}

\code{movie_output_mode} determines which file of output movie should be the returned.
The default \code{"HTML"} exports an HTML file with embedded javascript player app including the JSON data structure,
with which the user's default web-browser will be opend and the movie will be shown.
\code{"JSON"} exports JSON data structure for loading into user's existing page.
\code{"inline"} renders the HTML inside an iframe tag and suppresses all
other output in an attempt to make it embedable in rmarkdown documents.
\code{"htmlWidget"} is suitable for displaying in an RStudio plot window or Shiny app.
See the description of \code{output.mode} of \code{\link[ndtv:render.d3movie]{ndtv::render.d3movie()}}.

\code{"animation.mode"} determines the animation layout. While \code{"kamadakawai"} is the
is the default value, this may be actually not the best option and other option may produce
a better visualization. For using the latter options, user's firstly need to call it from their computer,
and do some steps before using these options.
For the detail, see the page of \code{\link[ndtv:network.layout.animate]{ndtv::network.layout.animate.Graphviz()}}.

If the user sets the nodal or edge properties to the visualization options that changes over time
(e.g. setting changing "age" to the size of the nodes), which is called
"TEA" (temporary ), it should be specified
how to retrieve attributes in each time slice.
}
\examples{
# preparing the dataset
node_attr <- data.frame(
  sex = factor(c(rep("m", 5), rep("f", 5))))
D <- setABM_network(n = 10,
                    node_attr = node_attr,
                    .act = actAgent_addEdges_random)
D <- runABM_network(D, .stopCondition = stopABM_times(simTimes = 5),
                    save_log = TRUE)

# Example 1: Plot the current network with the default settings
plotABM_network(D, show_d3movie = FALSE)

# Example 2: Plot the figures of each time slice
plotABM_network(D, log = TRUE, show_d3movie = FALSE)

# Example 3: Show the movie of the change of the network and set different colors to nodes
plotABM_network(D, log = TRUE, show_d3movie = TRUE, label.col = "sex")
}
