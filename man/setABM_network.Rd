% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setABM_network.R
\name{setABM_network}
\alias{setABM_network}
\title{Setting netABM_network Objects}
\usage{
setABM_network(
  agent_n,
  agent_attr = NULL,
  agent_f = list(NULL),
  agent_network = NULL
)
}
\arguments{
\item{agent_n}{integer. Number of agents}

\item{agent_attr}{vector/data.frame/list of attributes of agents (default: \code{NULL})}

\item{agent_f}{a user-defined or built-in function object or list of them representing agent's actions.
If user supplies only one action, it will then copied to all actors. User can also supply different actions for each agent as list.}

\item{agent_network}{Single n times n matrix or dataframe, or list of multiple matrices. The default value \code{NULL} will result in creating a n times n matrix without any edges.}
}
\value{
a \code{netABM_network} class object D (see Details)
}
\description{
\code{setABM_network} constructs a \code{netABM_network} object for running ABM.
}
\details{
\code{setAgent_network} is a constructor of \code{netABM_network} object (D)
which has \code{agent}, \code{stage}, \code{time}(set as 1), and \code{log} (set as NA)
as a list format.
Each agent in the \code{agent} has their attribute listed under \code{a} (i.e. "attributes"),
list of the names of agent partners, and the action as \code{.f} (i.e., "function").
The each agent under \code{agent} and networks under \code{stage} are \code{R6} class objects from package \code{R6}.
Object \code{D} also has a class \code{netABM} which is the parent class of \code{netABM_network}.

Each agent automatically get its \code{ID} and \code{act_label} and store them as their attributes.
The latter \code{act_label} is taken from the supplied object name of \code{agent_f}.

There are two ways to set \code{agnet_f}.
The first way is to write the user's own function of agent's
actions and attach it to an object and supply this object to \code{agent_f}.
Do not write the function directly to \code{agent_f} because this will not be properly parsed.
Upon writing an original function, be sure to set \code{D} as the first argument without any default;
otherwise agent's action does not reflect dynamically to the changing \code{D} object during the simulation.
\code{self} is a reserved for indicating the agent themselves.

The second way of setting \code{agent_f} is to use a built-in function of this package.
This second way actually has further three variations. First, the easiest one,
just supply the function object to \code{agent_f} (e.g., agent_f = function_name).
Second, if user wants to modify some argument, supply it as a form: \code{function_name(x = a new value)}.
Third, if user wants to put another name to this modified function object, assign it with substitute().
Then supply this substituted object to \code{agnet_f}. The last method may be useful when the modification
of the function is very long.
For getting the ideas more concretely about how to supply a function to \code{agent_f},
see the examples below.
}
\examples{
# Example 1: Save the user-defined action object as "agent_get_older"
agent_attr <- data.frame(
  age = c(0, 1, 2, 3, 4),
  sex = c("m","m","m","f","f"))
agent_network <- matrix(1, 5, 5)

# Example of the user-defined action
agent_get_older <- function(D){self$a$age <- self$a$age + 1}

D <- setABM_network(agent_n = 5,
                    agent_attr = agent_attr,
                    agent_f = agent_get_older,
                   agent_network = agent_network)

# Example 2: Set agent_f directly with an modified built-in function.
D <- setABM_network(
  n = 5,
  .act = actAgent_addEdges_random(.valueFunction = rnorm(n = 1, mean = 0, sd = 1)))

# Example 3: Set .act via a substituted object.
random2 <- substitute(actAgent_addEdges_random(.valueFunction = rnorm(n = 1, mean = 0, sd = 1)))

D <- setABM_network(
   n = 5,
   .act = random2)

# Example 4: Set diffenret actions for each agent.
agent_get_older2 <- function(D, b = 1){self$a$age <- b*self$a$age + 1}

D <- setABM_network(
   n = 5,
   .act = list(agent_get_older2(b = 1),
               agent_get_older2(b = 2),
               agent_get_older2(b = 3),
               agent_get_older2(b = 4),
               agent_get_older2(b = 5)))

}
\seealso{
Other setABM: 
\code{\link{setABM_spatNetwork}()}
}
\author{
Keiichi Satoh
}
\concept{setABM}
