% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_trace.R
\name{get_trace}
\alias{get_trace}
\title{Trace The Change in Agent's Attributes And Fields From A Log}
\usage{
get_trace(
  which_attr = NULL,
  which_ca = NULL,
  ID_ca = NULL,
  which_attr_ca = NULL,
  ID = NULL,
  D = NULL
)
}
\arguments{
\item{which_attr}{A character vector specifying the names of agent attributes to extract over time.
If \code{NULL}, no agent attributes are extracted. Default is \code{NULL}.}

\item{which_ca}{A character vector specifying the names of cellular automaton (CA)
to track. Default is \code{NULL}.}

\item{ID_ca}{A single value indicating the CA in which the cell in which agent ID is shown in the relevant position.
This must be provided if \code{which_attr_ca} is specified; otherwise the function does not know the position of the agent in CA.}

\item{which_attr_ca}{A character vector specifying CA from which the relevant agent's attribute is retrieved.
The cell must correspond to the agent location indicated by \code{ID_ca}.}

\item{ID}{A vector of agent IDs for which the traces are to be extracted.
If \code{NULL}, traces for all agents are extracted. Default is \code{NULL}.}

\item{D}{A list containing the simulation log (i.e., \code{D$log}) in the \code{ABM_D} class.
If \code{NULL}, the function attempts to retrieve \code{D} from the parent environment.
Default is \code{NULL}.}
}
\value{
A list where each element is a data frame containing the traces of the specified attributes or actions
over time. The list keys correspond to the requested attributes or actions.
}
\description{
How each agent changes their attributes and positions in the filed
is one of the focus in ABM. This function extracts such data from the simulated
log and convert them into the data.frame where agents are in the row and time is in the column.
}
\examples{
agent_get_older <- function(){self$age <- self$age + 1}
attr_ca1 <- matrix(1:9, 3, 3)
attr_ca2 <- matrix(rev(1:9), 3, 3)
ID_ca <- matrix(sample(c(rep(0, 4), 1:5)), 3, 3)
D <- setABM(agent_n = 5,
            agent_attr = data.frame(age = 1:5, sex = c("m", "m", "m", "f", "f")),
            ca = list(ID_ca = ID_ca, attr_ca1 = attr_ca1, attr_ca2 = attr_ca2),
            agent_f = agent_get_older)
D <- runABM(D, save_log = TRUE, stopFUN = 3)


get_trace(which_attr = c("age"),
          ID_ca = "ID_ca",
          which_attr_ca = c("attr_ca1", "attr_ca2"),
          D = D)
}
