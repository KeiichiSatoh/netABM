% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/agrABM_network.R
\name{agrABM_network}
\alias{agrABM_network}
\title{Aggregate Data From A netABM Object.}
\usage{
agrABM_network(D, agr_log = F, node_attr_long = F, duplicated_edges = "sum")
}
\arguments{
\item{D}{An object of class \code{netABM}, representing the network ABM simulation data.}

\item{agr_log}{A logical value indicating whether to aggregate the log data. Default is \code{FALSE}.}

\item{node_attr_long}{A logical value indicating whether to format node attributes in long format. Default is \code{FALSE}.}

\item{duplicated_edges}{A character string specifying how to handle duplicated edges.
Possible values are "sum", "min", "max", or "mean". Default is \code{"sum"}.}
}
\value{
A list containing aggregated data from the network ABM simulation,
including node attributes and aggregated networks.
}
\description{
\code{agrABM_network} create node attribute data.frame and network matrices,
which are the normal dataset format for the data analysis. The log file can be also converted
either as a separate file for each time slice or aggregated so-called long-format of the panel dataset.
}
\details{
This function aggregates data from a network ABM simulation stored in the 'netABM' class object.
If \code{agr_log} is \code{FALSE}, it aggregates the most recent data from
the simulation. If \code{agr_log} is \code{TRUE}, it aggregates data from
the simulation logs. If the log data is not available, it aggregates the most recent data instead.
The \code{node_attr_long} argument specifies whether to format node attributes in long format. When TRUE, it rearranges
node attributes into long format, suitable for further analysis.

The \code{duplicated_edges} argument determines how duplicated edges are handled
during aggregation. It can be set to \code{"sum"} (summing duplicated edges),
\code{"min"} (taking the minimum value), \code{"max"} (taking the maximum value),
or \code{"mean"} (calculating the mean value).
}
\examples{
# Preparing the data
D <- setABM_network(n = 5,
                    .act = actAgent_addEdges_random)
D <- runABM_network(D = D, 
                  save_log = TRUE, 
                  .stopCondition = stopABM_times(simTimes = 3))
                    
# Example 1: Simple aggregation of the current dataset
D_agr <- agrABM_network(D)
D_agr

# Example 2: Aggregation of the log
D_agr <- agrABM_network(D, agr_log = TRUE)
D_agr

# Example 3: Aggregation of the log with long-format node attributes
D_agr <- agrABM_network(D, agr_log = TRUE, node_attr_long = TRUE)
D_agr
}
