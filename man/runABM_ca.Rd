% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runABM_ca.R
\name{runABM_ca}
\alias{runABM_ca}
\title{Run the simulation based on the netABM_ca object}
\usage{
runABM_ca(D, .stopCondition = NULL, .selectAgent = NULL, save_log = FALSE)
}
\arguments{
\item{D}{a \code{netABM_ca} class object.}

\item{.stopCondition}{A user-defined or built-in function object that
determines when the simulation to stop.
The default value \code{NULL} will result in running one simulation.}

\item{.selectAgent}{A user-defined or built-in function object about
which agents to select. The default value \code{NULL} will result in
selecting all agents, meaning that all agents do their action each time.}

\item{save_log}{logical; if the log of each run should be saved.
The default is \code{FALSE}.}
}
\value{
a \code{netABM_ca} class object
}
\description{
\code{runABM_ca} let agents their action defined by \code{agent_f} in the
\code{netABM_ca} object.
}
\details{
\code{runAgent_ca} is a simulator based on \code{netABM_ca} object (D).
In each run the selected agents act their action defined \code{.f} of \code{netABM_ca}
object.

Because the counting system of \code{R} starts from 1, \code{runABM} counts
the initial time starts from 1,
which means that the one run of the simulation corresponds to time 2.

For setting \code{.stopCondition} and \code{.selectAgent} condition, there are two different ways.
The first way is to write the user's own function.
Upon writing an original function, be sure to set \code{D} as the first argument without any default;
otherwise agent's action does not reflect dynamically to the changing \code{D} object during the simulation.

In addition, each function should returns the following value:
\itemize{
\item \code{.stopCondition}: Returns \code{TRUE} if the condition of \code{D} reaches the desired condition
\item \code{.selectAgent}: Returns the character vector of the agent IDs (e.g., \code{"1"}, \code{"2"}...)
In addition, be sure to write the function in such a way that it takes \code{D} as the first argument without any default value.
}

The second way is to use a built-in function of this package.
This second way actually has further two variations. First, the easiest one,
just supply the function object to \code{.stopCondition} and \code{.selectAgent} (e.g., .stopCondition = function_name).
Second, if user wants to modify some argument, supply it as a form: \code{function_name(x = a new value)}.
See the examples below.
}
\examples{
# Initiate the CA
ca1 <- init_ca(agent_n = 5, dim = c(3,3))
   # Difine the agent behavior
move_to_vacant_place <- function(D){
  vacant_places <- which(D$ca$ca1==0)
  place_to_move <- sample(vacant_places, size = 1)
  ca_move(D, ID = self$ID, where_to = place_to_move)}
D <- setABM_ca(agent_n = 5, ca = ca1, agent_f = move_to_vacant_place)
D <- runABM_ca(D, .stopCondition = stopABM_times(simTimes = 2), save_log = TRUE)
# View the result
D$log$t1$ca$ca1   # Time 1 (The initial place)
D$log$t2$ca$ca1   # Time 2
D$log$t3$ca$ca1   # Time 3
}
\seealso{
Other runABM: 
\code{\link{runABM_network}()},
\code{\link{runABM_spatNetwork}()}
}
\author{
Keiichi Satoh
}
\concept{runABM}
