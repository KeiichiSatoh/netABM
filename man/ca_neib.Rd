% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ca_neib.R
\name{ca_neib}
\alias{ca_neib}
\title{Get Neighboring Cells in a Cellular Automaton}
\usage{
ca_neib(
  D = NULL,
  ID = NULL,
  loc = NULL,
  which_ca = 1,
  which_attr = 1,
  CA = NULL,
  neib_type = "Moore",
  torus = FALSE,
  attr = NULL,
  FUN = NULL,
  ...
)
}
\arguments{
\item{D}{A \code{netABM} class object. If \code{CA} is not provided,
\code{D} is required to access the CA grid.}

\item{ID}{The ID of the target agent. If \code{loc} is not provided, \code{ID} is required.}

\item{loc}{The location of the target cell as a vector (row, column).
If not provided, it will be inferred from the \code{ID}.}

\item{which_ca}{The index or name of the CA grid to use within the \code{D} object. Defaults to \code{1}.}

\item{CA}{A matrix representing the CA grid. If provided, this overrides the \code{D} parameter.}

\item{neib_type}{The type of neighborhood to use, either \code{"Moore"} or \code{"Neumann"}. Defaults to \code{"Moore"}.}

\item{torus}{Logical, indicating whether the grid should be treated as a torus. Defaults to \code{FALSE}.}

\item{attr}{A character vector specifying the attributes of the neighboring agents to retrieve. If \code{NULL}, only the IDs of neighboring cells are returned.}

\item{FUN}{An optional function to apply to the attributes of neighboring agents to calculate the specified score.
If \code{NULL}, the attributes are returned as-is.}

\item{...}{Additional arguments passed to \code{FUN}.}
}
\value{
Depending on the input parameters:
\itemize{
\item If \code{attr} is \code{NULL}, a vector of neighboring cell IDs is returned.
\item If \code{attr} is provided, a data frame of the specified attributes of neighboring agents is returned.
\item If \code{FUN} is provided, the result of applying \code{FUN} to the attributes is returned.
}
}
\description{
This function retrieves neighboring cells in a cellular automaton (CA) grid,
either defined by the \code{D} object or directly specified by the \code{CA} parameter.
It can handle both Moore and Neumann neighborhood types and can also handle toroidal grids.
}
\examples{
# creating a CA
CA <- matrix(1:16, 4, 4)
attr <- 1:16
# Get attributes of neighboring agents
ca_neib(ID = 1, CA = CA, attr = attr)
# Apply a function to the attributes of neighboring agents
ca_neib(ID = 1, CA = CA, attr = attr, FUN = mean)
}
