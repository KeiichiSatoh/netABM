% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modify_agents.R
\name{modify_agents}
\alias{modify_agents}
\title{Modifying a set of ABM_Agent class objects}
\usage{
modify_agents(
  D,
  agents_name,
  name,
  attr = NULL,
  act_FUN = NULL,
  active_binding = NULL,
  rename_from = NULL,
  copy_from = NULL,
  what = c("add_attr", "add_act_FUN", "add_active_binding", "rename", "copy", "remove"),
  deep_clone = TRUE
)
}
\description{
Modifying a set of ABM_Agent class objects
}
\details{
"rename"や"remove"を行う場合には、注意が必要。もしもこれらのフィールドを、
act_FUNやactive_bindingが参照している場合にはオブジェクトが適切に動かなくなる。
このため、特にこれらの作業を行う場合には、デフォルトのdeep_cloneをTRUEにし、
変更後のオブジェクトがもとのDオブジェクトとは異なる名前をもつ別のオブジェクト
を用意したうえで、動作を確認することが勧められる。

動作が確認できれば、あとはmodify_D関数を用いて、もとのDオブジェクトにコピーし直してもよい。
}
\examples{
# Create a simple D object with a set of agents
person <- init_agent(n = 3)
D <- setABM(agents = person)

# Add an 'age' attribute to each agent
D2 <- modify_agents(D = D, agents_name = "person",
                   what = "add_attr", name = "age", attr = c(1,2,3))

# Add a function 'print_age' as an action function (act_FUN) for each agent
print_age <- function(beta = 1){beta*self$age}

D2 <- modify_agents(D = D2, agents_name = "person", what = "add_act_FUN",
                   name = "print_age", act_FUN = print_age)

# Add another 'print_age' function with a default beta value of 2
D2 <- modify_agents(D = D2, agents_name = "person", what = "add_act_FUN",
                   name = "print_age2", act_FUN = "print_age(beta = 2)")

# Add an active binding 'sqrt_age' to calculate the square root of 'age'
sqrt_age <- function(){sqrt(self$age)}
D2 <- modify_agents(D = D2, agents_name = "person", what = "add_active_binding",
                   name = "sqrt_age", active_binding = sqrt_age)

# Copy 'age' to create a new attribute 'age2'
D2 <- modify_agents(D = D2, agents_name = "person", what = "copy",
                   copy_from = "age", name = "age2")

# Rename 'age2' to 'age3'
D2 <- modify_agents(D = D2, agents_name = "person", what = "rename",
                   rename_from = "age2", name = "age3")

# Remove the 'age3' attribute
D2 <- modify_agents(D = D2, agents_name = "person", what = "remove",
                    name = "age3")

# Setting deep_clone to FALSE modifies the original input object 'D' directly
modify_agents(D = D, agents_name = "person",
              what = "add_attr", name = "age3", attr = c(4,5,6),
              deep_clone = FALSE)
}
