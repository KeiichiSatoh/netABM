% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runABM_spatNetwork.R
\name{runABM_spatNetwork}
\alias{runABM_spatNetwork}
\title{Run the simulation based on the netABM_spatNetwork object}
\usage{
runABM_spatNetwork(
  D,
  .stopCondition = NULL,
  .selectAgent = NULL,
  save_log = FALSE
)
}
\arguments{
\item{D}{a \code{netABM_spatNetwork} class object.}

\item{.stopCondition}{A user-defined or built-in function object that
determines when the simulation to stop.
The default value \code{NULL} will result in running one simulation.}

\item{.selectAgent}{A user-defined or built-in function object about
which agents to select. The default value \code{NULL} will result in
selecting all agents, meaning that all agents do their action each time.}

\item{save_log}{logical; if the log of each run should be saved.
The default is \code{FALSE}.}
}
\value{
a \code{netABM_spatNetwork} class object
}
\description{
\code{runABM_spatNetwork} let agents their action defined by \code{.} in the
\code{netABM_spatNetwork} object.
}
\details{
\code{runAgent_spatNetwork} is a simulator based on \code{netABM_spatNetwork} object (D).
In each run the selected agents act their action defined \code{.f} of \code{netABM_spatNetwork}
object.

Because the counting system of \code{R} starts from 1, \code{runABM} counts
the initial time starts from 1,
which means that the one run of the simulation corresponds to time 2.

For setting \code{.stopCondition} and \code{.selectAgent} condition, there are two different ways.
The first way is to write the user's own function.
Upon writing an original function, be sure to set \code{D} as the first argument without any default;
otherwise agent's action does not reflect dynamically to the changing \code{D} object during the simulation.
\code{self} is a reserved for indicating the agent themselves.
In addition, each function should returns the following value:
#' - \code{.stopCondition}: Returns \code{TRUE} if the condition of \code{D} reaches the desired condition
\itemize{
\item \code{.selectAgent}: Returns the character vector of the agent IDs (e.g., \code{"A1"}, \code{"A2"}...)
In addition, be sure to write the function in such a way that it takes \code{D} as the first argument without any default value.
}

The second way is to use a built-in function of this package.
This second way actually has further two variations. First, the easiest one,
just supply the function object to \code{.stopCondition} and \code{.selectAgent} (e.g., .stopCondition = function_name).
Second, if user wants to modify some argument, supply it as a form: \code{function_name(x = a new value)}.
See the examples below.
}
\examples{
# Example 1
set.seed(1)
move_to_P1 <- function(D){
D$stage$location$loc[self$ID, self$loc] <- 0
D$stage$location$loc[self$ID, 1] <- 1
}

D <- setABM_spatNetwork(agent_n = 5,  agent_f = move_to_P1, place_n = 10)
D$stage$location
D <- runABM_spatNetwork(D = D, save_log = TRUE)
D$stage$location
}
\seealso{
Other runABM: 
\code{\link{runABM_network}()}
}
\author{
Keiichi Satoh
}
\concept{runABM}
