% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setABM_spatNetwork.R
\name{setABM_spatNetwork}
\alias{setABM_spatNetwork}
\title{Setting netABM_spatNetwork Objects}
\usage{
setABM_spatNetwork(
  agent_n,
  agent_attr = NULL,
  agent_f = list(NULL),
  agent_network = NULL,
  agent_location = NULL,
  place_n = NULL,
  place_attr = NULL,
  place_network = NULL
)
}
\arguments{
\item{agent_n}{integer. Number of agents}

\item{agent_attr}{vector, data.frame, or list of attributes of agents (default: \code{NULL})}

\item{agent_f}{a user-defined or built-in function object or a list of them representing agent's actions.
If user supplies only one action, it will then copied to all actors. User can also supply different actions for each agent as a list.}

\item{agent_network}{Single n times n matrix or data.frame,
or list of multiple matrices. The default value \code{NULL} will result in creating a n times n matrix without any edges.}

\item{agent_location}{vector, data.frame, matrix or list of agent location.
See the details for how to create each type of location object. The default \code{NULL} will allocate
each agents randomly to each place.}

\item{place_n}{integer. Number of places}

\item{place_attr}{vector, data.frame, or list of attributes of agents (default: \code{NULL})}

\item{place_network}{Single n times n matrix or data.frame,
or list of multiple matrices. The default value \code{NULL} will result in creating a n times n matrix wherein places are fully connected each other.}
}
\value{
a \code{netABM_network} class object D (see Details)
}
\description{
\code{setABM_spatNetwork} constructs a \code{netABM_spatNetwork} object for running ABM.
}
\details{
\code{setABM_spatNetwork} is a constructor of \code{netABM_spatNetwork} object (D)
which has \code{agent}, \code{place}, \code{stage}, \code{time}(set as 1), and \code{log} (set as NA) as a list format.
each agent in the \code{agent} has their attribute listed under \code{a} (i.e. "attributes"),
list of names of the agent partners, agent's current location on the places,
and agent actions as \code{.f} (i.e., "function").
Similarly, \code{place} contains each place's attribute (under \code{a}),
the ID of the agents who occupy the relevant place, and list of other places
that is connected from the current place.
\code{stage} contains the three different networks. \code{agent} is the agent network(s),
\code{location} is network(s) of places, and \code{location} is the two-mode
network in that each entry is \code{1} if an agent in the row locates at the place in
the column, and \code{0} otherwise.

Each agent automatically get its \code{ID} and \code{act_label} and store them as their attributes.
The latter \code{act_label} is taken from the supplied object name of \code{agent_f}.

There are two ways to set \code{agent_f}.
The first way is to write the user's own function of agent's
actions and attach it to an object and supply this object to \code{agent_f}.
Do not write the function directly to \code{agent_f} because this will not be properly parsed.
Upon writing an original function, be sure to set \code{D} as the first argument without any default;
otherwise agent's action does not reflect dynamically to the changing \code{D} object during the simulation.
\code{self} is a reserved for indicating the agent themselves.

The second way of setting \code{agent_f} is to use a built-in function of this package.
This second way actually has further three variations. First, the easiest one,
just supply the function object to \code{agent_f} (e.g., .act = function_name).
Second, if user wants to modify some argument, supply it as a form: \code{function_name(x = a new value)}.
Third, if user wants to put another name to this modified function object, assign it with substitute().
Then supply this substituted object to \code{agent_f}. The last method may be useful when the modification
of the function is very long.
For getting the ideas more concretely about how to supply a function to \code{agent_f},
see the examples below.

Incidentally, the each agent under \code{agents} is \code{R6} class object from package \code{R6}.
For getting more information about this class, see the R6's vignettes (https://r6.r-lib.org/articles/Introduction.html).

There are several options for setting \code{agent_location}. The simplest way is
supplying it as vector. For example, c(1,5,4) defines that first, second and third agent locate at first, fifth, and
fourth place, respectively. If users supplies agent_location as data.frame, each column will be
treated as a different dimension of location information. (e.g., location of living and location of working.)
Furthermore, users can also define agent places with a matrix wherein a agent in the row locates at place(s) in the column.
The last method will be useful if users want to let agents locates different places simultaneously.
Lastly, the the multiple matrices of agent_location can be supplied via list so that each matrices
will be treated as a different dimension of places.

Note that as explained above, agents can locates multiple places if defined as matrix format.
However, this may be rather a rare usage. Accordingly, in the default of the random allocation of
agents (if \code{NULL} was supplied to \code{agent_location}), each place is allowed to be occupied only
an agent. Hence, if number of agents are more than number of places, an error will be returned.

Incidentally, object \code{D} also has a class \code{netABM} which is the parent class of \code{netABM_network}.
}
\examples{
Example 1
set.seed(1)
move_to_P1 <- function(D){
  D$stage$location$loc[self$ID, names(self$loc)] <- 0
  D$stage$location$loc[self$ID, 1] <- 1
}
D <- setABM_spatNetwork(agent_n = 10, place_n = 15, agent_f = move_to_P1)
D$agent$A1$loc
D$agent$A1$.f(D)
D$agent$A1$loc      # A1 moved to P1
}
\seealso{
Other setABM: 
\code{\link{setABM_ca}()},
\code{\link{setABM_network}()}
}
\author{
Keiichi Satoh
}
\concept{setABM}
