// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// neib8_rcpp
NumericMatrix neib8_rcpp(NumericMatrix mat, IntegerMatrix posit_ind, bool include_ego);
RcppExport SEXP _netABM_neib8_rcpp(SEXP matSEXP, SEXP posit_indSEXP, SEXP include_egoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type posit_ind(posit_indSEXP);
    Rcpp::traits::input_parameter< bool >::type include_ego(include_egoSEXP);
    rcpp_result_gen = Rcpp::wrap(neib8_rcpp(mat, posit_ind, include_ego));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_netABM_neib8_rcpp", (DL_FUNC) &_netABM_neib8_rcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_netABM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
