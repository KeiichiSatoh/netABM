selfID
D$agents
i <- 2
D$agents[[i]]$e[[which_net]]
D$agents[[i]]$e[[which_net]][selfID]
D$agents[[i]]$e[[which_net]][selfID]
get_net(D, which_net = which_net)
get_net(D, which_net = which_net)[selfID, ]
ego_vect <- get_net(D, which_net = which_net)[selfID, ]
net <- get_net(D, which_net = which_net)
ego_vect <- net[selfID, ]
alt_vect <- net[ ,selfID]
alt_vect
ego_vect
# 両者を比較する
ego_vect == alt_vect
# 両者を比較する
ego_vect != alt_vect
# 両者を比較する
diff_edge <- ego_vect != alt_vect
diff_edge
names(diff_edge)
names(diff_edge)[diff_edge]
names(diff_edge)
# 両者を比較する
diff_edge <- ego_vect != alt_vect
diff_edge
colnames(diff_edge)[diff_edge]
diff_alt_name <- colnames(diff_edge)[diff_edge]
diff_alt_name
diff_alt_name
diff_alt_name
ego_vect
ego_vect[diff_alt_name[i]]
i <- 1
ego_vect[diff_alt_name[i]]
new_value <- ego_vect[diff_alt_name[i]]
names(new_value)
D$agents[[names(new_value)]]
D$agents[[names(new_value)]]$e[[which_net]]
D$agents
D$agents[[names(new_value)]]$e[[which_net]][selfID]
D$agents[[names(new_value)]]$e[[which_net]][selfID]
D$agents[[names(new_value)]]$e[[which_net]][selfID] <- new_value
D
network
i <- 1
network[i, ]
dimnames(network) <- list(1:5, 1:5)
network
network[i, ]
ego_net <- network[i, ]
ego_net
ego_net[egonet != 0]
ego_net[ego_net != 0]
network <- matrix(c(0, 1, 1, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network)
D
network
networks <- network
is.null(networks)
is.data.frame(networks)
is.matrix(networks)
### matrixの場合
object_name_networks <- as.character(substitute(networks))
object_name_networks
list(networks)
network
networks
network
# function
symmetrize_edges
network <- matrix(c(0, 1, 1, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5)
network
network <- matrix(c(0, 1, 1, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network)
D
self <- "ID1"
which_net <- 1
# selfIDがNULLの場合
if(any(class(self)=="R6")){
selfID <- self$a$ID
}else{
selfID <- self
}
selfID
D
# networkを取得する
net <- get_net(D, which_net = which_net)
ego_vect <- net[selfID, ]
alt_vect <- net[ ,selfID]
# 両者を比較する
diff_edge <- ego_vect != alt_vect
diff_alt_name <- colnames(diff_edge)[diff_edge]
diff_edge
diff_alt_name
# 変更箇所を修正する
for(i in 1:length(diff_alt_name)){
new_value <- ego_vect[diff_alt_name[i]]
if(new_value == 0){
D$agents[[names(new_value)]]$e[[which_net]][selfID] <- NULL
}else{
D$agents[[names(new_value)]]$e[[which_net]][selfID] <- new_value
}
}
D
network <- matrix(c(0, 1, 0, 0, 0,
1, 0, 0, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network)
D
# function
symmetrize_edges
# arguments
D
self <- "ID1"
which_net <- 1
# selfIDがNULLの場合
if(any(class(self)=="R6")){
selfID <- self$a$ID
}else{
selfID <- self
}
# networkを取得する
net <- get_net(D, which_net = which_net)
ego_vect <- net[selfID, ]
alt_vect <- net[ ,selfID]
# 両者を比較する
diff_edge <- ego_vect != alt_vect
diff_alt_name <- colnames(diff_edge)[diff_edge]
diff_edge
diff_alt_name
# 変更箇所を修正する
for(i in 1:length(diff_alt_name)){
new_value <- ego_vect[diff_alt_name[i]]
if(new_value == 0){
D$agents[[names(new_value)]]$e[[which_net]][selfID] <- NULL
}else{
D$agents[[names(new_value)]]$e[[which_net]][selfID] <- new_value
}
}
length(diff_alt_name)
i <- 1
new_value <- ego_vect[diff_alt_name[i]]
new_value
new_value == 0
D$agents[[names(new_value)]]$e[[which_net]][selfID]
D$agents[[names(new_value)]]$e[[which_net]][selfID] <- NULL
A <- 1:3
names(A) <- LETTERS[1:3]
A
A["c"]
A["c"]
A["C"]
A["C"] <- NULL
A[-"C"]
A["C"]
A[-"C"]
which(names(A)=="C")
i <- 1
temp_vec <- D$agents[[names(new_value)]]$e[[which_net]]
temp_vec
names(temp_vec)
names(new_value)
which(names(temp_vec) == names(new_value))
names(new_value)
temp_vec
temp_vec
new_value
which(names(temp_vec) == selfID)
temp_vec[which(names(temp_vec) == selfID)]
temp_vec[-which(names(temp_vec) == selfID)]
temp_vec[-which(names(temp_vec) == selfID)]
D$agents[[names(new_value)]]$e[[which_net]]
# 変更箇所を修正する
for(i in 1:length(diff_alt_name)){
new_value <- ego_vect[diff_alt_name[i]]
if(new_value == 0){
temp_vec <- D$agents[[names(new_value)]]$e[[which_net]]
D$agents[[names(new_value)]]$e[[which_net]] <- temp_vec[-which(names(temp_vec) == selfID)]
}else{
D$agents[[names(new_value)]]$e[[which_net]][selfID] <- new_value
}
}
D
network <- matrix(c(0, 1, 0, 0, 0,
1, 0, 0, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network)
D
# arguments
D
self <- "ID1"
which_net <- 1
# selfIDがNULLの場合
if(any(class(self)=="R6")){
selfID <- self$a$ID
}else{
selfID <- self
}
# networkを取得する
net <- get_net(D, which_net = which_net)
ego_vect <- net[selfID, ]
alt_vect <- net[ ,selfID]
# 両者を比較する
diff_edge <- ego_vect != alt_vect
diff_alt_name <- colnames(diff_edge)[diff_edge]
# 変更箇所を修正する
for(i in 1:length(diff_alt_name)){
new_value <- ego_vect[diff_alt_name[i]]
if(new_value == 0){
temp_vec <- D$agents[[names(new_value)]]$e[[which_net]]
D$agents[[names(new_value)]]$e[[which_net]] <- temp_vec[-which(names(temp_vec) == selfID)]
}else{
D$agents[[names(new_value)]]$e[[which_net]][selfID] <- new_value
}
}
D
get_net(D)
network <- matrix(c(0, 1, 0, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network)
D
# function
symmetrize_edges
# arguments
D
self <- "ID1"
which_net <- 1
# selfIDがNULLの場合
if(any(class(self)=="R6")){
selfID <- self$a$ID
}else{
selfID <- self
}
# networkを取得する
net <- get_net(D, which_net = which_net)
ego_vect <- net[selfID, ]
alt_vect <- net[ ,selfID]
# 両者を比較する
diff_edge <- ego_vect != alt_vect
diff_alt_name <- colnames(diff_edge)[diff_edge]
diff_edge
diff_alt_name
length(diff_alt_name)
symmetrize_edges <- function(D, self, which_net = 1){
# selfIDがNULLの場合
if(any(class(self)=="R6")){
selfID <- self$a$ID
}else{
selfID <- self
}
# networkを取得する
net <- get_net(D, which_net = which_net)
ego_vect <- net[selfID, ]
alt_vect <- net[ ,selfID]
# 両者を比較する
diff_edge <- ego_vect != alt_vect
diff_alt_name <- colnames(diff_edge)[diff_edge]
# 変更箇所を修正する
## もしも修正するものが何もない場合
if(length(diff_alt_name)==0){
return(NULL)
}else{
## 修正する場合
for(i in 1:length(diff_alt_name)){
new_value <- ego_vect[diff_alt_name[i]]
if(new_value == 0){
temp_vec <- D$agents[[names(new_value)]]$e[[which_net]]
D$agents[[names(new_value)]]$e[[which_net]] <- temp_vec[-which(names(temp_vec) == selfID)]
}else{
D$agents[[names(new_value)]]$e[[which_net]][selfID] <- new_value
}
}
}
}
network <- matrix(c(0, 1, 0, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network)
D
# function
symmetrize_edges(D, self = "ID1")
get_net(D)
# Example 1: add an edge from ID3 to ID1 to symmterize
network1 <- matrix(c(0, 1, 1, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network)
# symmetrize
symmetrize_edges(D, self = "ID1")
# Example 1: add an edge from ID3 to ID1 to symmterize
network1 <- matrix(c(0, 1, 1, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network1)
get_net(D)
# symmetrize
symmetrize_edges(D, self = "ID1")
get_net(D)
D
D
get_net(D)
# Example 1: add an edge from ID3 to ID1 to symmterize
network1 <- matrix(c(0, 1, 1, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network1)
get_net(D)
# symmetrize
symmetrize_edges(D, self = "ID1")
D
D$agents
# Example 1: add an edge from ID3 to ID1 to symmterize
network <- matrix(c(0, 1, 1, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network)
get_net(D)
# symmetrize
symmetrize_edges(D, self = "ID1")
get_net(D)
D
which_net
# 投入Dの状況を取得する
n <- length(D$agents)
agent_names <- names(D$agents)
# 結合整形用に、すべてのagentが入った空のvectorを作成
temp_vec <- rep(0, n)
names(temp_vec) <- agent_names
# 各アクターのネットワークを取得
net_temp <- lapply(X = D$agents, function(X){
X$e[[which_net]]
})
net_temp
D
net_temp
net_temp$ID1
net_temp$ID2
net_temp$ID3
# Example 1: add an edge from ID3 to ID1 to symmterize
network <- matrix(c(0, 1, 1, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network)
get_net(D)
self <- "ID1"
which_net <- 1
# selfIDがNULLの場合
if(any(class(self)=="R6")){
selfID <- self$a$ID
}else{
selfID <- self
}
# networkを取得する
net <- get_net(D, which_net = which_net)
ego_vect <- net[selfID, ]
alt_vect <- net[ ,selfID]
# 両者を比較する
diff_edge <- ego_vect != alt_vect
diff_alt_name <- colnames(diff_edge)[diff_edge]
diff_alt_name
i <- 1
D$agents[[names(new_value)]]$e[[which_net]][selfID]
new_value
D$agents[[names(new_value)]]$e[[which_net]][[selfID]]
D$agents[[names(new_value)]]$e[[which_net]][[selfID]] <- new_value
D
D$agents$ID3
D$agents$ID3$e
D$agents$ID3$e$network
new_value
class(new_value)
as.vector(new_value)
c(new_value)
names(new_value)
unlist(new_value)
symmetrize_edges <- function(D, self, which_net = 1){
# selfIDがNULLの場合
if(any(class(self)=="R6")){
selfID <- self$a$ID
}else{
selfID <- self
}
# networkを取得する
net <- get_net(D, which_net = which_net)
ego_vect <- net[selfID, ]
alt_vect <- net[ ,selfID]
# 両者を比較する
diff_edge <- ego_vect != alt_vect
diff_alt_name <- colnames(diff_edge)[diff_edge]
# 変更箇所を修正する
## もしも修正するものが何もない場合
if(length(diff_alt_name)==0){
return(NULL)
}else{
## 修正する場合
for(i in 1:length(diff_alt_name)){
new_value <- unlist(ego_vect[diff_alt_name[i]])
if(new_value == 0){
temp_vec <- D$agents[[names(new_value)]]$e[[which_net]]
D$agents[[names(new_value)]]$e[[which_net]] <- temp_vec[-which(names(temp_vec) == selfID)]
}else{
D$agents[[names(new_value)]]$e[[which_net]][selfID] <- new_value
}
}
}
}
# Example 1: add an edge from ID3 to ID1 to symmterize
network <- matrix(c(0, 1, 1, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network)
get_net(D)
# symmetrize
symmetrize_edges(D, self = "ID1")
get_net(D)
network1 <- matrix(c(0, 1, 1, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network1)
get_net(D)
# symmetrize
symmetrize_edges(D, self = "ID1")
get_net(D)        # symmetrized
# Example 2: delete an edge from ID3 to ID1 to symmterize
network2 <- matrix(c(0, 1, 0, 0, 0,
1, 0, 0, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network2)
get_net(D)
# symmetrize
symmetrize_edges(D, self = "ID1")
get_net(D)        # symmetrized
# Example 3: nothing occurs because the network is already symmetric
network3 <- matrix(c(0, 1, 1, 0, 0,
1, 0, 0, 0, 0,
1, 0, 0, 0, 0,
0, 0, 0, 0, 0,
0, 0, 0, 0, 0), 5, 5, byrow = T)
# Create the netABM_network object
D <- setABM_network(n = 5, networks = network3)
get_net(D)
# symmetrize
symmetrize_edges(D, self = "ID1")
get_net(D)        # symmetrized
document()
load_all()
get_net
?get_net
library(devtools)
get_net
?net_attr
load_all()
?setABM_network
document()
load_all()
library(devtool)
library(devtools)
load_all()
document()
